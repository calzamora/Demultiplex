Define the problem: 
The problem for de-multiplexing is that the 4 intitial read files that are given contain reads from 24 seperate cell lines which were each prepped with different barcodes. The goal is to take these 4 files and output 52 files. 2 unknown (FW and RV reads in which the index aka barcode is either not in the barcde library OR is too low of a qual score) - 2 unmatched (FW and RV reads in which the indexes ARE in the library but do not match indicating that index hopping occured) - and 48 matched files (24 FW reads for each indes and 24 RV reads for each index)


ARG PARSE: 
inputs: 
1) f1, f2, f3, f4
2) quality score threshold 
3) matched index txt


FUNCTIONS: 
def rev_compliment: 
"this function will reverse compliment a DNA seq and output the corresponding seq as a string"
take in STRING 
for each index pos of the string: 
    string.upper()
    string.replace(A, T)
    string.replace(T, A)
    string.replace(C, G)
    string.replace(G, C)
return(string)

def:append_index_head
"this function will append both indexes to the END of a header"
input: take in 3 strings (header, index 1, index 2)
return(header + index1 + index2)

def: avg_qscore (PS4)
"a function to get the MEAN q score for an entire READ"
input: quality socres : str
    use convert phred and mean the entire read 
    return(mean q score of read)

###
I ACTUALLY DONT THINK I WANT TO MAKE THIS A FUNCTION
###
def: write file 
"writes out the file and DYNAMICALLy names it with the barcode seq when applicable"




INITIALIZE: 

4 lists to hold the RECORD for each file every loop
File1 = []
File2 = []
File3 = []
File4 = []

OPEN txt file of indexes 
    create a set containing ALL UNIQUE barcodes

initialize index list dictionary for COUNTING: key : TOUPLE for each possible index combo VALUE: occurance 
for index1 in index list: 
    for index2 in index list:
    key = (index1, reverse_compliment(index2))
    value = 0 

initialize dict to append index to header:
key: same aas couter dict above
value: string of indexes but with second index reverse complimented 

#when appending header we will call back to this dictionary RATHER than reverse complimenting each time we read a R3 seq line
#the goal of the two dictionaries above is to limit the amount of times we have to reverse compliment 

#BC we will only be comparing R3 to index, having the second tuple being the RC of the indexes means that we only have to call the 
RC function when we populate the dictionary and tehn we can compare the original R3 file to this withough having ot RC each time we read a seq in R3

unknown_read_counter = 0

OPEN all 4 read files concurently (While true loop)
    for i in range 4 
        file1.readline.strip.append
        file2.readline.strip.append
        file3.readline.strip.append
        file4.readline.strip.append
    APPEND indexes (R2 + R3 files) to END OF ALL HEADERS in R1 + R4 files
    append_index_head(F2)
    append_index_head(F3)
    IF (indexes are unknown either containing Ns or NOT in the set of indexes)
        write R1 file (w indexes appended) -> UNKNOWN biological reads 1 (FW reads) 
        write R2 file (w indexes appended) -> UNKNOWN biological reads 2 (RV reads)
        unknown_read_counter += 1
    ELIF indicies are valid (are in the set of known indexes):
        IF mean qual score of the INDEX is NOT greater than or equal to the cut off:
        write R1 file (w indexes appended) -> UNKNOWN biological reads 1 (FW reads) 
        write R2 file (w indexes appended) -> UNKNOWN biological reads 2 (RV reads)
        ELIF: 
            IF both indexes appended to the headers MATCH:
                write R1 file (w indexes appended) -> MATCHED biological reads 1 (FW reads) 
                write R2 file (w indexes appended) -> MATCHED biological reads 2 (RV reads)
                index_dictionary([index, index]) += 1
            ELIF: (indexes are valid but do not MATCH):
                index_dictionary([index1, index2]) += 1
                write R1 file (w indexes appended) -> UNMATCHED biological reads 1 (FW reads) 
                write R2 file (w indexes appended) -> UNMATCHED biological reads 2 (RV reads)
    File1 = []
    File2 = []
    File3 = []
    File4 = []
